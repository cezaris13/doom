#+TITLE: Emacs config
#+PROPERTY: header-args :tangle config.el
* Table of contents :TOC:
- [[#configuration][Configuration]]
  - [[#user-data][User data]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#org-location][Org location]]
  - [[#line-number-style][Line number style]]
  - [[#scrolling][Scrolling]]
  - [[#ligatures][Ligatures]]
  - [[#languages-setup][Languages setup]]
  - [[#keybindings][Keybindings]]
  - [[#org-mode][Org mode]]
  - [[#misc][Misc]]
  - [[#additional-info][Additional info]]

* Configuration
** User data
- Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!
- Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+begin_src emacs-lisp
(setq user-full-name "Pijus Petkeviƒçius"
      user-mail-address "pijus.petkevicius314@gmail.com")
#+end_src
** Font
- Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:
  + `doom-font'
  + `doom-variable-pitch-font'
  + `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.

- They all accept either a font-spec, font string ("Input Mono-12"), or xlfdfont string. You generally only need these two:
#+begin_src emacs-lisp :tangle yes
(setq doom-font (font-spec :family "Fira Code" :size 14 :weight 'light)
      doom-symbol-font (font-spec :family "Symbola" :size 22 :weight 'Regular))


 ;;(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
 ;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

#+RESULTS:
: #<font-spec nil nil Symbola nil nil regular nil nil 22 nil nil nil nil>

** Theme
 There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:
#+begin_src emacs-lisp
(setq doom-theme 'kanagawa-wave)
(custom-theme-set-faces! 'kanagawa-wave
  '(line-number :foreground "dim gray")
  '(line-number-current-line :foreground "white")
  '(mode-line-inactive :background "dim gray" :foreground "white" :height 80)
  '(mode-line :background "#16161D" :height 80)
  '(default :background "#1F1F28"))

;; add custom image to emacs home screen
(setq fancy-splash-image "~/.config/doom/splash/kanagawa.png");; note- if you comment this line, the logo will appear on start screen, but opening new buffer, window, etc. will show doom logo

#+end_src

#+RESULTS:
: ~/.config/doom/splash/kanagawa.png

** Org location
- If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!
#+begin_src emacs-lisp
(setq org-directory "~/Desktop/Org_mode/")
#+end_src

#+end_src
** Line number style
- This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative);; relative line numbers(like in vim)
#+end_src

** Scrolling
*** Mouse sidescroll
#+begin_src emacs-lisp
(global-set-key (kbd "<mouse-6>") (lambda () (interactive) (scroll-right 6)))
(global-set-key (kbd "<mouse-7>") (lambda () (interactive) (scroll-left 6)))

;; for MX master 3 mouse
(global-set-key (kbd "<wheel-right>") (lambda () (interactive) (scroll-left 6)))
(global-set-key (kbd "<wheel-left>") (lambda () (interactive) (scroll-right 6)))

(setq mouse-wheel-tilt-scroll t)
#+end_src

#+RESULTS:
: t
*** Scrolling settings
#+begin_src emacs-lisp
(setq scroll-step 1)
(setq scroll-conservatively 10000)
(setq auto-window-vscroll nil)
(setq redisplay-dont-pause t
  scroll-margin 1
  scroll-step 1
  scroll-conservatively 10000
  scroll-preserve-screen-position 1)
#+end_src

** Ligatures
 #+begin_src emacs-lisp :tangle yes
(plist-put! +ligatures-extra-symbols
  ;; org
  :name          "¬ª"
  :src_block     "¬ª"
  :src_block_end "¬´"
  :quote         "‚Äú"
  :quote_end     "‚Äù"
  ;; Functional
  :lambda        "Œª"
  :def           "∆í"
  :composition   "‚àò"
  :map           "‚Ü¶"
  ;; Types
  :null          "‚àÖ"
  :true          "ùïã"
  :false         "ùîΩ"
  :int           "‚Ñ§"
  :float         "‚Ñù"
  :str           "ùïä"
  :bool          "ùîπ"
  :list          "ùïÉ"
  ;; Flow
  :not           "Ôø¢"
  :in            "‚àà"
  :not-in        "‚àâ"
  :and           "‚àß"
  :or            "‚à®"
  :for           "‚àÄ"
  :some          "‚àÉ"
  :return        "‚üº"
  :yield         "‚üª"
  ;; Other
  :union         "‚ãÉ"
  :intersect     "‚à©"
  :diff          "‚àñ"
  :tuple         "‚®Ç"
  :pipe          "ÓÑµ" ;; FIXME: find a non-private char
  :dot           "‚Ä¢")  ;; you could also add your own if you want

(set-ligatures! '(kotlin-mode java-mode)
  :null "null"
  :and  "&&"
  :or  "||"
  :not "!"
  )
(set-ligatures! '(c-mode c++-mode)
  :null "NULL"
  :and  "&&"
  :or  "||"
  :not "!"
  )
#+end_src

** Languages setup
*** General LSP
#+begin_src emacs-lisp :tangle yes
(setq lsp-inlay-hints-mode t)
(setq lsp-inlay-hint-enable t)

(setq lsp-modeline-code-actions-enable t)
(setq lsp-ui-sideline-enable nil)
(setq lsp-ui-sideline-show-hover nil)
(setq company-idle-delay 0.1)
(setq company-meghanada-prefix-length 3)
#+end_src

#+RESULTS:
: t

*** Rust
#+begin_src emacs-lisp :tangle yes
(use-package rustic
  :config
  (setq rustic-format-on-save t))

(use-package lsp-mode
  :commands lsp
  :custom
  (lsp-auto-guess-root t)
  (lsp-keymap-prefix "M-m l")
  (lsp-modeline-diagnostics-enable nil)
  (lsp-keep-workspace-alive nil)
  (lsp-auto-execute-action nil)
  (lsp-before-save-edits nil)
  (lsp-eldoc-enable-hover nil)
  (lsp-diagnostic-package :none)
  (lsp-completion-provider :none)
  (lsp-file-watch-threshold 1500)
  (lsp-enable-links)
  :custom-face
  (lsp-face-highlight-read ((t (:underline t :background nil :foreground nil))))
  (lsp-face-highlight-write ((t (:underline t :background nil :foreground nil))))
  (lsp-face-highlight-textual ((t (:underline t :background nil :foreground nil))))
  :hook
  (lsp-mode . lsp-enable-which-key-integration))
#+end_src

*** C#
#+begin_src emacs-lisp
  (use-package omnisharp
             :after company
             :init
             (add-to-list 'company-backends 'company-omnisharp)
             (add-hook 'csharp-mode-hook 'my-csharp-mode-setup)
             :config
             (defun my-csharp-mode-setup ()
               (omnisharp-mode)
               (company-mode)
               (flycheck-mode)
               (setq indent-tabs-mode nil)
               (setq c-syntactic-indentation t)
               (c-set-style "ellemtel")
               (setq c-basic-offset 4)
               (setq truncate-lines t)
               (setq tab-width 4)
               (setq evil-shift-width 4)
               )
             :bind (("C-c C-d" . 'omnisharp-run-code-action-refactoring)))
#+end_src

** Keybindings
*** Dolphin
#+begin_src emacs-lisp
(defun open-external-file-explorer ()
  "Opens file explorer in the current directory"
  (interactive)
  (call-process-shell-command "dolphin . &" nil 0))
(global-set-key (kbd "<f3>") 'open-external-file-explorer)
#+end_src

*** Termite
#+begin_src emacs-lisp
(defun open-external-terminal ()
  "Opens external terminal in the current directory"
  (interactive)
  (call-process-shell-command "alacritty  &" nil 0))
(global-set-key (kbd "<f1>") 'open-external-terminal)
#+end_src

#+RESULTS:
: open-external-terminal

*** Find file
#+begin_src emacs-lisp :tangle yes
(use-package! projectile
  :config
  ;; Bind s-S-o to find file in project using projectile (command+shift+o)
  (map! :desc "Open Find file in the project"
        "s-O" #'projectile-find-file))
#+end_src

#+RESULTS:
: t

*** Find current file in directory
#+begin_src emacs-lisp :tangle yes
(use-package! neotree
  :config
  ;; Bind s-S-j to open NeoTree to the current file's location (command+shift+j)
  (map! :desc "Open NeoTree at current file"
        "s-J" #'+neotree/find-this-file))
#+end_src

#+RESULTS:
: t

*** Find references in project
#+begin_src emacs-lisp :tangle yes
(defun find-references-under-cursor ()
  "Find references of the word under the cursor using projectile-find-references"
  (interactive)
  (let ((word (thing-at-point 'word t)))  ; Get the word at point
    (if word
        (projectile-find-references word)
      (projectile-find-references)
      )
    )
  )

(map! :desc "Find references of the word under cursor in the project"
        "s-F" 'find-references-under-cursor)
#+end_src

#+RESULTS:

*** Find definition under cursor
#+begin_src emacs-lisp
(global-set-key [f12] 'xref-find-definitions)

(map! :desc "Find definition under cursor"
      "s-<mouse-1>" 'xref-find-definitions)
#+end_src

#+RESULTS:

** Org mode
*** Calendar settings
#+begin_src emacs-lisp :tangle yes
(setq european-calendar-style 't)
(setq calendar-week-start-day 1);; weeks start on monday
#+end_src
*** TODO modes
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)"
                    "PROJ(p)"
                    "LOOP(R)"
                    "STRT(s)"
                    "WAIT(w)"
                    "LECTURE(l)"
                    "ROUTINE(r)"
                    "HOLD(h)"
                    "IDEA(i)"
                    "|"
                    "DONE(d)"
                    "KILL(k)")
          (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
          (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))
  (setq org-todo-keyword-faces
        '(("[-]" . +org-todo-active)
          ("STRT" . +org-todo-active)
          ("[?]" . +org-todo-onhold)
          ("WAIT" . +org-todo-onhold)
          ("HOLD" . +org-todo-onhold)
          ("PROJ" . +org-todo-project)
          ("LECTURE" . (:foreground "orange"))
          ("ROUTINE" . (:foreground "violet"))
          ("NO" . +org-todo-cancel)
          ("KILL" . +org-todo-cancel)))
)
 #+end_src

*** Org bullets
 #+begin_src emacs-lisp :tangle yes
  (require 'org-checklist)
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("‚óâ" "‚óã"))
 #+end_src
 #+RESULTS:
 | ‚óâ | ‚óã |
** Misc
#+begin_src emacs-lisp
(save-place-mode 1)
(yas-global-mode 1)

;; fancy org bullets
(add-hook 'c-mode-hook #'rainbow-mode)
(setq doc-view-continuous t);; scrolling in pdf file

#+end_src

#+RESULTS:
: t
** Additional info
- Here are some additional functions/macros that could help you configure Doom:
  + `load!' for loading external *.el files relative to this one
  + `use-package!' for configuring packages
  + `after!' for running code after a package has loaded
  + `add-load-path!' for adding directories to the `load-path', relative to this file. Emacs searches the `load-path' when you load packages with `require' or `use-package'.
  + `map!' for binding new keys
- To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
- This will open documentation for it, including demos of how they are used.
- You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implement
